name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # Job 1: Build and Push Docker Image to ECR adfggdsgrszdrfaalk
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Amazon ECR
        env:
          AWS_REGION: us-east-1
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

      - name: Build Docker image
        run: |
          cd Docker
          docker build -t darede .

      - name: Docker Tag
        run: |
          docker tag darede:latest ${{ secrets.ECR_URI }}

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_URI }}

# Job 2: Snyk Security Scan
  security:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout do código
    - name: Checkout code
      uses: actions/checkout@v2

    # 2. Log in no Amazon ECR
    - name: Log in to Amazon ECR
      env:
        AWS_REGION: us-east-1
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

    # 3. Pull da imagem do ECR
    - name: Pull Docker image from ECR
      run: |
        docker pull ${{ secrets.ECR_URI }}

    # 4. Instalação do Snyk CLI
    - name: Install Snyk CLI
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        npm install -g snyk
        snyk auth $SNYK_TOKEN

    # 5. Executar o Snyk Scan
    - name: Snyk Docker Scan
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        snyk container test ${{ secrets.ECR_URI }} || true
      shell: bash

  # Job 3: Terraform Apply
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
           aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}
