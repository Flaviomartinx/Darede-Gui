name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
#teste
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      BRANCH: ${{ steps.git-info.outputs.BRANCH }}
      HASH: ${{ steps.git-info.outputs.HASH }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract Branch and Commit Hash
        id: git-info
        run: |
          echo "BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "::set-output name=BRANCH::$(git rev-parse --abbrev-ref HEAD)"
          echo "::set-output name=HASH::$(git rev-parse --short HEAD)"

      - name: Log in to Amazon ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure 'set' aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

      - name: Build Docker image
        run: |
          cd Docker
          docker build -t darede .

      - name: Docker Tag with Branch and Commit Hash
        run: |
          docker tag darede:${{ steps.git-info.outputs.HASH }} ${{ secrets.ECR_URI }}:${{ steps.git-info.outputs.BRANCH }}-${{ steps.git-info.outputs.HASH }}
          docker tag darede:${{ steps.git-info.outputs.HASH }} ${{ secrets.ECR_URI }}:${{ steps.git-info.outputs.HASH }}t

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_URI }}:${{ steps.git-info.outputs.BRANCH }}-${{ steps.git-info.outputs.HASH }}
          docker push ${{ secrets.ECR_URI }}:${{ steps.git-info.outputs.HASH }}

  security:
    runs-on: ubuntu latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Amazon ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

      - name: Pull Docker image from ECR
        run: |
          docker pull ${{ secrets.ECR_URI }}:${{ steps.git-info.outputs.BRANCH }}-${{ steps.git-info.outputs.HASH }}

      - name: Install Snyk CLI
        run: |
          npm install -g snyk
          snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Docker Scan
        run: |
          snyk container test ${{ secrets.ECR_URI }}:${{ steps.git-info.outputs.BRANCH }}-${{ steps.git-info.outputs.HASH }} || true
